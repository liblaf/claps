name: Release

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Create GitHub Release
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    outputs:
      created: ${{ steps.release.outputs.releases_created }}
      tag: ${{ steps.release.outputs.tag_name }}
    steps:
      - id: release
        name: Create GitHub Release
        uses: google-github-actions/release-please-action@v4
        with:
          release-type: rust

  build:
    name: Build
    needs:
      - release
    if: needs.release.outputs.created == 'true'
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust Toolchain
        run: |
          rustup default stable
          rustup update stable
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ github.token }}
      - name: Install GNU Softwares
        uses: liblaf/template/.github/actions/install@main
        with:
          brew: coreutils gnu-sed
          choco: gnuwin32-coreutils.install sed
      - name: Build
        run: task dist
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ runner.arch }}
          path: dist/*
    strategy:
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest

  publish:
    name: Publish
    needs:
      - release
    if: needs.release.outputs.created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust Toolchain
        run: rustup default stable
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  upload:
    name: Upload Release Assets
    permissions:
      contents: write
    needs:
      - build
      - release
    if: needs.release.outputs.created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: Upload Release Assets
        run: gh release --repo="${{ github.repository }}" upload "${{ needs.release.outputs.tag }}" * --clobber
        env:
          GH_TOKEN: ${{ github.token }}
